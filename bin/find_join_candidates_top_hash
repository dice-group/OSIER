#!/usr/bin/env python

import pickle
import os
import argparse

from osier.tablefactory import load_atomic_tables_lazy
from osier.join import get_top_hash
from osier.pathes import ATOMIC_TABLES_TOP_HASHES_SIMPLE,\
    ATOMIC_TABLES_TOP_HASHES_LEMMATIZE, ATOMIC_TABLES_TOP_HASHES_CATEGORIZE

parser = argparse.ArgumentParser(description="""Find join candidates for table corpus.""")
parser.add_argument('mode', help="Mode 'simple' or 'lemmatize'")
args = parser.parse_args()
vectorization_type = args.mode

if vectorization_type == "simple":
    _cache = ATOMIC_TABLES_TOP_HASHES_SIMPLE
elif vectorization_type == "lemmatize":
    _cache = ATOMIC_TABLES_TOP_HASHES_LEMMATIZE
elif vectorization_type == "categorize":
    _cache = ATOMIC_TABLES_TOP_HASHES_CATEGORIZE

join_candidates = {}

if os.path.exists(_cache):
    _f = open(_cache, "rb")
    join_candidates = pickle.load(_f)
    _f.close()
else:
    for _id, atomic_table in load_atomic_tables_lazy():
        if not isinstance(atomic_table[0], list):
            continue
        _hash = get_top_hash(atomic_table, vectorization_type=vectorization_type)
        if not _hash in join_candidates:
            join_candidates[_hash] = []
        join_candidates[_hash].append(_id)
    _f = open(_cache, 'wb')
    pickle.dump(join_candidates, _f)
    _f.close()

# Check hashes
from os import listdir
from os.path import isfile, join
from osier.pathes import ATOMIC_TABLES_DIR
ATOMIC_TABLES_LIST = [f for f in listdir(ATOMIC_TABLES_DIR) if isfile(join(ATOMIC_TABLES_DIR, f))]
for key in join_candidates:
    atomic_table_ids = join_candidates[key]
    for atomic_table_id in atomic_table_ids:
        assert "{}.table".format(atomic_table_id.strip()) in ATOMIC_TABLES_LIST

print("Done!")
